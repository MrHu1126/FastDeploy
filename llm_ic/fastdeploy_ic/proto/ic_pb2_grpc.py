# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ic_pb2 as ic__pb2


class GRPCInferenceServiceStub(object):
    """Inference Server GRPC endpoints.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ModelStreamInfer = channel.unary_stream(
                '/language_inference.GRPCInferenceService/ModelStreamInfer',
                request_serializer=ic__pb2.ModelInferRequest.SerializeToString,
                response_deserializer=ic__pb2.ModelInferResponse.FromString,
                )
        self.ModelFetchRequest = channel.unary_unary(
                '/language_inference.GRPCInferenceService/ModelFetchRequest',
                request_serializer=ic__pb2.ModelFetchRequestParams.SerializeToString,
                response_deserializer=ic__pb2.ModelFetchRequestResult.FromString,
                )
        self.ModelSendResponse = channel.stream_unary(
                '/language_inference.GRPCInferenceService/ModelSendResponse',
                request_serializer=ic__pb2.ModelInferResponse.SerializeToString,
                response_deserializer=ic__pb2.ModelSendResponseResult.FromString,
                )
        self.ModelSendResponseList = channel.stream_unary(
                '/language_inference.GRPCInferenceService/ModelSendResponseList',
                request_serializer=ic__pb2.ModelInferResponseList.SerializeToString,
                response_deserializer=ic__pb2.ModelSendResponseResult.FromString,
                )


class GRPCInferenceServiceServicer(object):
    """Inference Server GRPC endpoints.
    """

    def ModelStreamInfer(self, request, context):
        """模型推理请求入口，给上层dispatch调用
        输入一个请求，流式返回多个response
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModelFetchRequest(self, request, context):
        """拉取一个请求，给inference server调用
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModelSendResponse(self, request_iterator, context):
        """发送请求的返回结果，给inference server调用
        response是流式的发送
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModelSendResponseList(self, request_iterator, context):
        """批量发送请求的返回结果，给inference server调用
        response是流式的发送
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GRPCInferenceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ModelStreamInfer': grpc.unary_stream_rpc_method_handler(
                    servicer.ModelStreamInfer,
                    request_deserializer=ic__pb2.ModelInferRequest.FromString,
                    response_serializer=ic__pb2.ModelInferResponse.SerializeToString,
            ),
            'ModelFetchRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.ModelFetchRequest,
                    request_deserializer=ic__pb2.ModelFetchRequestParams.FromString,
                    response_serializer=ic__pb2.ModelFetchRequestResult.SerializeToString,
            ),
            'ModelSendResponse': grpc.stream_unary_rpc_method_handler(
                    servicer.ModelSendResponse,
                    request_deserializer=ic__pb2.ModelInferResponse.FromString,
                    response_serializer=ic__pb2.ModelSendResponseResult.SerializeToString,
            ),
            'ModelSendResponseList': grpc.stream_unary_rpc_method_handler(
                    servicer.ModelSendResponseList,
                    request_deserializer=ic__pb2.ModelInferResponseList.FromString,
                    response_serializer=ic__pb2.ModelSendResponseResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'language_inference.GRPCInferenceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GRPCInferenceService(object):
    """Inference Server GRPC endpoints.
    """

    @staticmethod
    def ModelStreamInfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/language_inference.GRPCInferenceService/ModelStreamInfer',
            ic__pb2.ModelInferRequest.SerializeToString,
            ic__pb2.ModelInferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModelFetchRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/language_inference.GRPCInferenceService/ModelFetchRequest',
            ic__pb2.ModelFetchRequestParams.SerializeToString,
            ic__pb2.ModelFetchRequestResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModelSendResponse(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/language_inference.GRPCInferenceService/ModelSendResponse',
            ic__pb2.ModelInferResponse.SerializeToString,
            ic__pb2.ModelSendResponseResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModelSendResponseList(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/language_inference.GRPCInferenceService/ModelSendResponseList',
            ic__pb2.ModelInferResponseList.SerializeToString,
            ic__pb2.ModelSendResponseResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
